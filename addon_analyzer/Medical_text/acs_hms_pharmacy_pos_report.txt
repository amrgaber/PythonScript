Addon: acs_hms_pharmacy_pos

Manifest: __manifest__.py
Content:
```python
# -*- coding: utf-8 -*-
#╔══════════════════════════════════════════════════════════════════════╗
#║                                                                      ║
#║                  ╔═══╦╗       ╔╗  ╔╗     ╔═══╦═══╗                   ║
#║                  ║╔═╗║║       ║║ ╔╝╚╗    ║╔═╗║╔═╗║                   ║
#║                  ║║ ║║║╔╗╔╦╦══╣╚═╬╗╔╬╗ ╔╗║║ ╚╣╚══╗                   ║
#║                  ║╚═╝║║║╚╝╠╣╔╗║╔╗║║║║║ ║║║║ ╔╬══╗║                   ║
#║                  ║╔═╗║╚╣║║║║╚╝║║║║║╚╣╚═╝║║╚═╝║╚═╝║                   ║
#║                  ╚╝ ╚╩═╩╩╩╩╩═╗╠╝╚╝╚═╩═╗╔╝╚═══╩═══╝                   ║
#║                            ╔═╝║     ╔═╝║                             ║
#║                            ╚══╝     ╚══╝                             ║
#║                  SOFTWARE DEVELOPED AND SUPPORTED BY                 ║
#║                ALMIGHTY CONSULTING SOLUTIONS PVT. LTD.               ║
#║                      COPYRIGHT (C) 2016 - TODAY                      ║
#║                      https://www.almightycs.com                      ║
#║                                                                      ║
#╚══════════════════════════════════════════════════════════════════════╝
{
    'name': 'Hospital Pharmacy Management - Point of Sale',
    'version': '1.0.1',
    'summary': 'Link module between Point of Sale and Hospital Pharmacy Management system',
    'description': """ Link module between Point of Sale and Hospital Pharmacy Management system. Posnt of prescription integration with Hospital management system.
""",
    'category': 'Medical',
    'author': 'Almighty Consulting Solutions Pvt. Ltd.',
    'website': 'https://www.almightycs.com',
    'license': 'OPL-1',
    'depends': ['acs_hms_pharmacy', 'point_of_sale'],
    'data': [
        'data/acs_hms_pharmacy_pos_data.xml',
        'security/security.xml',
        'security/ir.model.access.csv',
        'views/prescription_order_views.xml',
        'views/pos_order_views.xml',
        'views/stock_template.xml',
    ],
    'assets': {
        'point_of_sale._assets_pos': [
            'acs_hms_pharmacy_pos/static/src/**/*',
        ],
    },
    'images': [
        'static/description/hms_pharmacy_pos_almightycs_odoo_cover.jpg',
    ],
    'sequence': 2,
    'price': 260,
    'currency': 'USD',
    'installable': True,
    'auto_install': False,

}

```

__init__.py:
Content:
```python
# -*- coding: utf-8 -*-

from . import models

```

Models:
  File: models/__init__.py
  Content:
```
# -*- coding: utf-8 -*-
# Part of AlmightyCS. See LICENSE file for full copyright and licensing details.

from . import pos_order
from . import prescription_order

```

  File: models/pos_order.py
  Content:
```
# -*- coding: utf-8 -*-

from odoo import api, fields, models, _
from odoo.tools import float_compare, float_is_zero


class PosOrder(models.Model):
    _inherit = 'pos.order' 

    pos_order_line_ids = fields.One2many('pos.order.line', 'prescription_order_origin_id', string="Order lines Transfered to Point of Sale", readonly=True, groups="point_of_sale.group_pos_user")
    currency_rate = fields.Float(compute='_compute_currency_rate', store=True, digits=0, readonly=True)
    prescription_order_count = fields.Integer(string='Prescription Order Count', compute='_count_prescription_order', readonly=True, groups="point_of_sale.group_pos_user")

    def _count_prescription_order(self):
        for order in self:
            order.prescription_order_count = len(order.lines.mapped('prescription_order_origin_id'))

    @api.depends('pricelist_id.currency_id', 'date_order', 'company_id')
    def _compute_currency_rate(self):
        for order in self:
            date_order = order.date_order or fields.Datetime.now()
            order.currency_rate = self.env['res.currency']._get_conversion_rate(order.company_id.currency_id, order.currency_id, order.company_id, date_order)
 
    def _prepare_invoice_vals(self):
        invoice_vals = super(PosOrder, self)._prepare_invoice_vals()
        addr = self.partner_id.address_get(['delivery'])
        invoice_vals['partner_shipping_id'] = addr['delivery']
        return invoice_vals

    @api.model
    def create_from_ui(self, orders, draft=False):
        order_ids = super(PosOrder, self).create_from_ui(orders, draft)
        for order in self.sudo().browse([o['id'] for o in order_ids]):
            so_lines = order.lines.mapped('prescription_order_line_id')

            # update the demand qty in the stock moves related to the prescription order line
            # flush the qty_delivered to make sure the updated qty_delivered is used when
            # updating the demand value
            so_lines.flush_recordset(['qty_delivered'])
            # track the waiting pickings
            waiting_picking_ids = set()
            for so_line in so_lines:
                for stock_move in so_line.move_ids:
                    picking = stock_move.picking_id
                    if not picking.state in ['waiting', 'confirmed', 'assigned']:
                        continue
                    new_qty = so_line.product_uom_qty - so_line.qty_delivered
                    if float_compare(new_qty, 0, precision_rounding=stock_move.product_uom.rounding) <= 0:
                        new_qty = 0
                    stock_move.product_uom_qty = so_line.product_uom._compute_quantity(new_qty, stock_move.product_uom, False)
                    waiting_picking_ids.add(picking.id)

            def is_product_uom_qty_zero(move):
                return float_is_zero(move.product_uom_qty, precision_rounding=move.product_uom.rounding)

            # cancel the waiting pickings if each product_uom_qty of move is zero
            for picking in self.env['stock.picking'].browse(waiting_picking_ids):
                if all(is_product_uom_qty_zero(move) for move in picking.move_ids):
                    picking.action_cancel()

        return order_ids

    def action_view_prescription_order(self):
        self.ensure_one()
        linked_orders = self.lines.mapped('prescription_order_origin_id')
        return {
            'type': 'ir.actions.act_window',
            'name': _('Linked Prescription Orders'),
            'res_model': 'prescription.order',
            'view_mode': 'tree,form',
            'domain': [('id', 'in', linked_orders.ids)],
        }


class PosOrderLine(models.Model):
    _inherit = 'pos.order.line'

    prescription_order_origin_id = fields.Many2one('prescription.order', string="Linked Prescription Order")
    prescription_order_line_id = fields.Many2one('prescription.line', string="Source Prescription Order Line")
    acs_kit_details = fields.Text(string="Kit Details")

    def _export_for_ui(self, orderline):
        result = super()._export_for_ui(orderline)
        # NOTE We are not exporting 'prescription_order_line_id' because it is being used in any views in the POS App.
        result['acs_kit_details'] = bool(orderline.acs_kit_details) and orderline.acs_kit_details
        result['prescription_order_origin_id'] = bool(orderline.prescription_order_origin_id) and orderline.prescription_order_origin_id.read(fields=['name'])[0]
        return result

    def _order_line_fields(self, line, session_id):
        result = super()._order_line_fields(line, session_id)
        vals = result[2]
        if vals.get('prescription_order_origin_id', False):
            vals['prescription_order_origin_id'] = vals['prescription_order_origin_id']['id']
        if vals.get('prescription_order_line_id', False):
            vals['prescription_order_line_id'] = vals['prescription_order_line_id']['id']
        return result

```

  File: models/prescription_order.py
  Content:
```
# -*- coding: utf-8 -*-

from odoo import api, fields, models, _


class PrescriptionOrder(models.Model):
    _inherit = 'prescription.order'

    pos_order_line_ids = fields.One2many('pos.order.line', 'prescription_order_origin_id', string="Order lines Transfered to Point of Sale", readonly=True, groups="point_of_sale.group_pos_user")
    pos_order_count = fields.Integer(string='Pos Order Count', compute='_count_pos_order', readonly=True, groups="point_of_sale.group_pos_user")
    fiscal_position_id = fields.Many2one('account.fiscal.position', string='Fiscal Position', readonly=True)
    partner_id = fields.Many2one(related='patient_id.partner_id', string='Customer', store=True)
    pricelist_id = fields.Many2one('product.pricelist', string='Pricelist')
    date_order = fields.Datetime(related='prescription_date', store=True, string="Order Date")
    deliver_only_once = fields.Boolean("Deliver only Once", default=True)
    acs_pos_processed = fields.Boolean(compute="_check_acs_pos_processed", store=True)

    @api.model
    def search_read(self, domain=None, fields=None, offset=0, limit=None, order=None):
        return super(PrescriptionOrder, self).search_read(domain, fields, offset, limit, order)

    @api.depends('deliver_only_once','pos_order_line_ids')
    def _check_acs_pos_processed(self):
        for rec in self:
            rec.acs_pos_processed = True if (rec.deliver_only_once and rec.pos_order_line_ids) else False

    def _count_pos_order(self):
        for order in self:
            linked_orders = order.pos_order_line_ids.mapped('order_id')
            order.pos_order_count = len(linked_orders)

    def action_view_pos_order(self):
        self.ensure_one()
        linked_orders = self.pos_order_line_ids.mapped('order_id')
        return {
            'type': 'ir.actions.act_window',
            'name': _('Linked POS Orders'),
            'res_model': 'pos.order',
            'view_mode': 'tree,form',
            'domain': [('id', 'in', linked_orders.ids)],
        }

class PrescriptionLine(models.Model):
    _inherit = 'prescription.line'

    pos_order_line_ids = fields.One2many('pos.order.line', 'prescription_order_line_id', string="Order lines Transfered to Point of Sale", readonly=True, groups="point_of_sale.group_pos_user")
    qty_delivered = fields.Float(compute="_compute_qty_delivered", store=True)
    qty_invoiced = fields.Float(compute="_compute_qty_invoiced", store=True)

    #ACS: fields added with needed name on pos order for more simplicity
    product_uom_qty = fields.Float(related='quantity', store=True, string='Quantity for POS')
    product_uom = fields.Many2one(related="dosage_uom_id", store=True, string='UOM for POS')
    order_id = fields.Many2one(related='prescription_id', store=True, string='Prescription for POS')
    is_kit_product = fields.Boolean(related='product_id.is_kit_product', store=True)

    @api.depends('pos_order_line_ids.qty')
    def _compute_qty_delivered(self):
        for prescription_line in self:
            prescription_line.qty_delivered += sum([self._convert_qty(prescription_line, pos_line.qty, 'p2s') for pos_line in prescription_line.pos_order_line_ids if prescription_line.product_id.type != 'service'], 0)

    @api.depends('pos_order_line_ids.qty')
    def _compute_qty_invoiced(self):
        for prescription_line in self:
            prescription_line.qty_invoiced += sum([self._convert_qty(prescription_line, pos_line.qty, 'p2s') for pos_line in prescription_line.pos_order_line_ids], 0)

    def read_converted(self):
        field_names = [ "product_id", "name", "price_unit", "product_uom_qty", "tax_ids", "price_total", "qty_delivered", "qty_invoiced", "discount", "is_kit_product"] #"qty_to_invoice"
        results = []
        for prescription_line in self:
            if prescription_line.product_id and prescription_line.product_id.type!='service':
                product_uom = prescription_line.product_id.uom_id
                prescription_line_uom = prescription_line.product_id.uom_id
                item = prescription_line.read(field_names)[0]
                if prescription_line.product_id.tracking != 'none':
                    item['lot_names'] = prescription_line.move_ids.move_line_ids.lot_id.mapped('name')
                # if product_uom == prescription_line_uom:
                #     results.append(item)
                #     continue
                item['product_uom_qty'] = self._convert_qty(prescription_line, item['product_uom_qty'], 's2p')
                item['qty_delivered'] = self._convert_qty(prescription_line, item['qty_delivered'], 's2p')
                item['qty_invoiced'] = self._convert_qty(prescription_line, item['qty_invoiced'], 's2p')
                # item['qty_to_invoice'] = self._convert_qty(prescription_line, item['qty_to_invoice'], 's2p')
                item['price_unit'] = prescription_line_uom._compute_price(item['price_unit'], product_uom)

                #Manage kit product also
                if not prescription_line.product_id.is_kit_product:
                    results.append(item)
                else:
                    for kit_line in prescription_line.product_id.acs_kit_line_ids:
                        if kit_line.product_id.type!='service':
                            qty = kit_line.product_qty * prescription_line.product_uom_qty
                            item = {
                                'id': prescription_line.id,
                                'product_id': (kit_line.product_id.id, kit_line.product_id.display_name),
                                'product_uom_qty': qty,
                                'price_unit': kit_line.product_id.list_price,
                                'name': kit_line.product_id.name,
                                'tax_ids': [],
                                'price_total': qty * kit_line.product_id.list_price,
                                'qty_delivered': 0,
                                'qty_invoiced': 0,
                                'discount': 0,
                                'is_kit_product': True,
                                'kit_product_name': prescription_line.product_id.name,
                                'kit_product_qty': prescription_line.product_uom_qty,
                                'product_uom_id': kit_line.product_id.uom_id.id,
                                'lot_names': []
                            }
                            results.append(item)
            elif prescription_line.display_type == 'line_note':
                if results:
                    results[-1]['customer_note'] = prescription_line.name
        return results

    @api.model
    def _convert_qty(self, prescription_line, qty, direction):
        """Converts the given QTY based on the given SALE_LINE and DIR.

        if DIR='s2p': convert from prescription line uom to product uom
        if DIR='p2s': convert from product uom to prescription line uom
        """
        product_uom = prescription_line.product_id.uom_id
        prescription_line_uom = prescription_line.product_uom
        if direction == 's2p':
            return prescription_line_uom._compute_quantity(qty, product_uom, False)
        elif direction == 'p2s':
            return product_uom._compute_quantity(qty, prescription_line_uom, False)


```

Views:
  File: views/pos_order_views.xml
  Content:
```
<?xml version="1.0"?>
<odoo>

    <record id="view_pos_order_form_inherit_pos_prescription" model="ir.ui.view">
        <field name="name">pos.order.form.pos.prescription</field>
        <field name="model">pos.order</field>
        <field name="inherit_id" ref="point_of_sale.view_pos_pos_form"/>
        <field name="arch" type="xml">
            <xpath expr="//button[@name='action_view_invoice']" position="before">
                <button type="object"
                    name="action_view_prescription_order" class="oe_stat_button" icon="fa-shopping-basket" invisible="not prescription_order_count">
                    <div class="o_field_widget o_stat_info">
                        <span class="o_stat_value">
                            <field name="prescription_order_count" widget="statinfo" nolabel="1" class="mr4" /> Transfered<br/>
                            from Prescription
                        </span>
                    </div>
                </button>
            </xpath>
        </field>
    </record>

</odoo>

```

  File: views/prescription_order_views.xml
  Content:
```
<?xml version="1.0"?>
<odoo>
    <data>
        <record id="view_hms_prescription_order_form_pos" model="ir.ui.view">
            <field name="name">prescription.order.form.pos.prescription</field>
            <field name="model">prescription.order</field>
            <field name="inherit_id" ref="acs_hms.view_hms_prescription_order_form"/>
            <field name="arch" type="xml">
                <xpath expr="//div[@name='button_box']" position="inside">
                    <button type="object"
                        name="action_view_pos_order"
                        class="oe_stat_button"
                        icon="fa-shopping-basket" invisible="not pos_order_count" groups="point_of_sale.group_pos_user">
                        <div class="o_field_widget o_stat_info">
                            <span class="o_stat_value">
                                <field name="pos_order_count" widget="statinfo" nolabel="1" class="mr4" /> Transfered<br/>
                                to POS
                            </span>
                        </div>
                    </button>
                </xpath>
                <field name="appointment_id" position="after">
                    <field name="deliver_only_once"/>
                    <field name="acs_pos_processed"/>
                </field>
            </field>
        </record>
    </data>
</odoo>

```

  File: views/stock_template.xml
  Content:
```
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- <template id="message_body" inherit_id="stock.message_body">
        <xpath expr="//t[contains(@t-if, 'move.state')]" position="inside">
            <t groups="point_of_sale.group_pos_user">
                <t t-set="pos_orders" t-value="move.prescription_line_id.pos_order_line_ids.mapped('order_id')" />
                <t t-if="len(pos_orders)">
                    <li>
                        Delivered from
                        <t t-foreach="pos_orders" t-as="pos_order">
                            <a href="#" t-att-data-oe-model="pos_order._name" t-att-data-oe-id="pos_order.id">
                                <t t-esc="pos_order.display_name" />
                            </a><span t-if="pos_orders.ids[-1:] != pos_order.ids">, </span>
                        </t>
                    </li>
                </t>
            </t> 
        </xpath>
    </template> -->
</odoo>

```

Security:
  File: security/security.xml
  Content:
```
<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <!-- <record id="pos_prescription_rule_pos_channel_pos_manager" model="ir.rule">
        <field name="name">POS Prescriptions Team</field>
        <field name="model_id" ref="prescriptions_team.model_crm_team"/>
        <field name="domain_force">[(1,'=',1)]</field>
        <field name="groups" eval="[(4, ref('point_of_sale.group_pos_manager'))]"/>
    </record> -->
</odoo>

```

Data:
  File: data/acs_hms_pharmacy_pos_data.xml
  Content:
```
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">

    </data>
</odoo>


```

Static:
  File: static/description/index.html
  Content:
```
<head>
  <style>
      .backgrounds{background-color:#fff; color:#0B80E6}
  </style>
</head>

<section class="oe_container">
    <div class="mt32 mb32">
        <div style="background-color: #2d9f9d; background-image: linear-gradient(#918c8c, #2d9f9d); background: linear-gradient(106deg,#918c8c 0%,#2d9f9d 100%); border-radius: 10px 10px 10px 10px; min-height: 160px;">
            <div class="text-white font-weight-bold" style="text-decoration: none; font-size: 14px; padding-top: 10px;">
                <div class="pt-2 text-center">
                    <span>
                    <span class="pt-2 text-center" style="font-size:27px;">Almighty Consulting Solutions Pvt. Ltd.</span><br/>
                </div>
                <div class="row mt16">
                    <div class="col-4 text-center">
                        <span>Supported Editions</span><br/> 
                        <span class="badge badge-pill badge-light" style="background: linear-gradient(106deg,#f9f6f6 0%,#8c8d8d 100%); border-radius: 0.4rem; padding: 1.00em 0.4em; padding-right: 2em; padding-left: 2em;"> 
                                <i class="fa fa-check-circle position-absolute" style="font-size:16px; margin-left:-17px; margin-top:-2px"></i>Community 
                        </span>
                        <span class="badge badge-pill badge-light" style="background: linear-gradient(106deg,#f9f6f6 0%,#8c8d8d 100%); border-radius: 0.4rem; padding: 1.00em 0.4em; padding-right: 2em; padding-left: 2em;"> 
                                <i class="fa fa-check-circle position-absolute" style="font-size:16px; margin-left:-17px; margin-top:-2px"></i>Enterprise 
                        </span>
                    </div>

                    <div class="col-4 text-center">
                        <a href="https://www.almightycs.com" target="_blank">
                            <img src="almightycs.png" width="80" height="auto">
                        </a>
                    </div>

                    <div class="col-4 text-center">
                        <span>Supported Hostings <br/></span>
                        <span class="badge badge-pill badge-light" style="background: linear-gradient(106deg,#f9f6f6 0%,#8c8d8d 100%); border-radius: 0.4rem; padding: 1.00em 0.4em; padding-right: 2em; padding-left: 2em;"> 
                                <i class="fa fa-check-circle position-absolute" style="font-size:16px; margin-left:-17px; margin-top:-2px"></i>Odoo.sh 
                        </span>
                        <span class="badge badge-pill badge-light" style="background: linear-gradient(106deg,#f9f6f6 0%,#8c8d8d 100%); border-radius: 0.4rem; padding: 1.00em 0.4em; padding-right: 2em; padding-left: 2em;"> 
                                <i class="fa fa-check-circle position-absolute" style="font-size:16px; margin-left:-17px; margin-top:-2px"></i>Cloud
                        </span>
                        <span class="badge badge-pill badge-light" style="background: linear-gradient(106deg,#f9f6f6 0%,#8c8d8d 100%); border-radius: 0.4rem; padding: 1.00em 0.4em; padding-right: 2em; padding-left: 2em;"> 
                                <i class="fa fa-check-circle position-absolute" style="font-size:16px; margin-left:-17px; margin-top:-2px"></i>On Premise 
                        </span><br/>
                        <span class="pt-2 text-center" style="font-size:12px;">App can not be used on odoo online.</span><br/>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
 
<section class="oe_container">
    <div class="oe_row oe_spaced">
        <div class="oe_span12 oe_mt32 mb32">
            <h3 class="oe_slogan">Hospital Pharmacy Management System</h3><h4><br/>This Module Adds Hospital Pharmacy Managemnt system to Manage pharmacy operations of sale, purchase, batch pricing and barcoding.</h4>
        </div>
    </div> 
</section>

<section class="oe_container">
    <div class="oe_row oe_spaced">
        <div class="oe_demo o_picture o_screenshot">
            <a href="http://www.almightycs.com/blog/blogs-1" target="_blank">
                <img src="hms_menus_odoo_almightycs.png">
            </a>
            <div class="oe_demo_footer oe_centeralign">HMS Menus with special Pharmacy Menu.</div>
        </div>
    </div>
</section>

<section class="oe_container mt32 mb32">
    <div class="oe_row oe_spaced">
        <div class='oe_span12 mt92 alert alert-success'>
            <h3 class="text-center"> 
                <i class="fa fa-star fa-spin fa-2x fa-fw"></i>
                What is special from other HMS applications 
                <i class="fa fa-star fa-spin fa-2x fa-fw"></i>
            </h3>
            <hr/>
            <h2><i class="fa fa-hand-o-right text-success"></i> Clean Code</h2>
            <h2><i class="fa fa-hand-o-right text-success"></i> Proper User Roles</h2>
            <h2><i class="fa fa-hand-o-right text-success"></i> Record Rules and Access rights</h2>
            <h2><i class="fa fa-hand-o-right text-success"></i> Clean Form Views</h2>
            <h2><i class="fa fa-hand-o-right text-success"></i> Many more supporting modules to complete flow</h2>
        </div>
    </div>
</section>


<section class="oe_mt32">
    <div class='text-center mt92'>
        <h2> Detailed Description of Module</h2>
    </div>
    <div class="panel-body">
        <div class="alert alert-info">
            <a data-toggle="collapse" href="#acs_ipd"><i class="fa fa-plus-circle"></i></a>
            <b> POS - Pharmacy Management</b>
            <b style="float:right"><a href="http://www.almightycs.com" target="_blank">By ACS </b>
        </div>
        <div id="acs_ipd" class="panel-collapse collapse in" class="oe_span12">
            <h3><i class="fa fa-hand-o-right text-success"></i> Manage HMS Prescription order directly from POS.</h3>
            <h3><i class="fa fa-hand-o-right text-success"></i> Manage Kit products also from During POS order.</h3>
            <h3><i class="fa fa-hand-o-right text-success"></i> See Linked POS orders on Prescription.</h3>
            <h3><i class="fa fa-hand-o-right text-success"></i> See Linked Prescription Orders from POS order directly.</h3>
            <h3><i class="fa fa-hand-o-right text-success"></i> Manage Other Phamrcay flows from backend With <a href="https://apps.odoo.com/apps/modules/15.0/acs_hms_pharmacy"> HMS Pharmacy Module</a>)</h3>
        </div> 
    </div>
</section>

<section>
    <div class="oe_row oe_spaced">
        <h4 class="oe_slogan"><a href="http://www.almightycs.com">Almighty Consulting Solutions Pvt. Ltd.</a> </h4>
    </div>
</section>

<section class="oe_container">
    <div class="oe_row oe_spaced">
        <div class="oe_span12">
            <h3 class="oe_slogan">Other Configuration</h3>
            <p class="oe_slogan">To use this module no technical knowledge is required. Just install module and functionality is ready to use. For more customization and help contact us.</p>
        </div>
    </div>
</section>

<section class="oe_container">
    <div class="oe_row oe_spaced">
        <div class="oe_span6">
            <div class="oe_demo o_picture o_screenshot">
                <a href="https://www.almightycs.com" target="_blank">
                    <img src="acs.png" width="200" height="auto">
                </a>
                <div class="oe_demo_footer oe_centeralign">Meet Us</div>
            </div>
        </div>
        <div class="oe_span6">
            <br/><br/>
            <h2 class="oe_slogan">Do you need help?</h2>
            <h3 class="oe_slogan">
                Let's offer you the best services!
            </h3>
            <p class="oe_mt32 text-center">
                Contact us by our official channels.
            </p>
            <p class="oe_mt32 text-center">
                Skype: turkesh4friends 
            </p>
            <div class="oe_spaced">
                <ul class="text-center list-inline">
                    <li>
                        <a href="https://www.linkedin.com/organization-guest/company/almighty-consulting-services" Target="_blank"><i class="fa fa-linkedin-square fa-xs backgrounds"></i></a>
                    </li>
                    <li>
                        <a href="https://www.facebook.com/AlmightyCS.ERP" Target="_blank"><i class="fa fa-facebook-square fa-xs backgrounds"></i></a>
                    </li>
                    <li>
                        <a href="https://github.com/tpa-odoo" Target="_blank"><i class="fa fa-github-square fa-xs backgrounds"></i></a>
                    </li>
                    <li>
                        <a href="mailto:info@almightycs.com" Target="_blank"><i class="fa fa-envelope-square fa-xs backgrounds"></i></a>
                    </li>
                    <li>
                        <a href="https://twitter.com/_AlmightyCS" Target="_blank" ><i class="fa fa-twitter-square fa-xs backgrounds"></i></a>
                    </li>

                    <li>
                        <a title="Contact us" data-toggle="tooltip" data-placement="left" Target="_blank" href="https://www.almightycs.com/contactus"><i class="fa fa-globe fa-xs backgrounds"></i></a>
                    </li>
                </ul>
            </div>
        </div>

    </div>
</section>

<section class="oe_container">

    <div data-toggle="collapse" href="#contactus-floating" role="button" aria-expanded="true" aria-controls="contactus-floating" style="
            width: 70px;
            height: 70px;
            background: linear-gradient(106deg,#918c8c 0%,#2d9f9d 100%);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            position: fixed;
            bottom: 10px;
            right: 20px;
            z-index: 1000;
            box-shadow: 1px 2px 11px rgba(0, 0, 0, 0.3), -5px 7px 12px rgba(0, 0, 0, 0.22);
            cursor: pointer;">
        <span class="fa fa-2x fa-handshake-o"></span>
    </div>
    
    <div class="collapse show" id="contactus-floating" style="z-index: 1006; position: fixed; bottom: 10px; right: 20px;">
        <div style="width:246px; overflow: hidden;">
            <div class="text-center acs-contactus-close" data-toggle="collapse" href="#contactus-floating" role="button" aria-expanded="true" aria-controls="contactus-floating" style="
                    width: 25px;
                    height: 25px;
                    margin-bottom: -25px;
                    display: flex;
                    color: white;
                    align-items: center;
                    justify-content: center;
                    position: relative;
                    z-index: 1000;
                    cursor: pointer;">
                <i class="fa fa-times"></i>
            </div>
            <div class="acs-contactus-data" style="
                    margin-top: -17px;
                    background: linear-gradient(106deg,#918c8c 0%,#2d9f9d 100%);
                    border-radius: 10px 10px 10px 10px;
                    padding-bottom: 10px;
                    height: 106px;">
                <div class="text-center" style="text-decoration: none; font-size: 14px; padding-top: 10px;">
                    <span class="pt-2 text-white font-weight-bold" style="">Contact AlmightyCS</span>
                </div>
                <div class="acs-contactus-block" style="padding: 10px; font-size: 14px;">  
                    <a href="skype:turkesh4friends" target="_blank" class="oe_span5 flex-column align-items-center text-white font-weight-light">
                        <i class="fa fa-skype" style="font-size: 22px;"></i>
                        <span class="pt-2 font-weight-bold">Skype</span>
                    </a>
                    <a href="https://www.almightycs.com" target="_blank" class="oe_span7 flex-column align-items-center text-white font-weight-light">
                        <i class="fa fa-globe fa-spin" style="font-size: 22px;"></i>
                        <span class="pt-2 font-weight-bold">Website</span>
                    </a>
                </div>
                <div class="acs-contactus-block" style="padding: 10px; 
                    font-size: 14px; 
                    padding-bottom: 20px; 
                    padding-top: 22px;"> 
                    <a href="mailto:info@almightycs.com" target="_blank" class="oe_span5 flex-column align-items-center text-white font-weight-light">
                        <i class="fa fa-envelope" style="font-size: 19px;"></i>
                        <span class="pt-2 font-weight-bold">Email</span>
                    </a>
                    <a href="https://www.almightycs.com/contactus" target="_blank" class="oe_span7 flex-column align-items-center text-white font-weight-light">
                        <i class="fa fa-handshake-o" style="font-size: 20px;"></i>
                        <span class="pt-2 font-weight-bold">Contactus</span>
                    </a>
                </div>
            </div>
        </div>
    </div> 

</section>
```

  File: static/src/app/order_management_screen/prescription_order_fetcher/prescription_order_fetcher.js
  Content:
```
/** @odoo-module */
 
import { registry } from "@web/core/registry";
import { EventBus } from "@odoo/owl";

class PrescriptionOrderFetcher extends EventBus {
    static serviceDependencies = ["orm", "pos"];
    constructor({ orm, pos }) {
        super();
        this.currentPage = 1;
        this.ordersToShow = [];
        this.totalCount = 0;
        this.orm = orm;
        this.pos = pos;
    }

    /**
     * for nPerPage = 10
     * +--------+----------+
     * | nItems | lastPage |
     * +--------+----------+
     * |     2  |       1  |
     * |    10  |       1  |
     * |    11  |       2  |
     * |    30  |       3  |
     * |    35  |       4  |
     * +--------+----------+
     */
    get lastPage() {
        const nItems = this.totalCount;
        return Math.trunc(nItems / (this.nPerPage + 1)) + 1;
    }
    /**
     * Calling this methods populates the `ordersToShow` then trigger `update` event.
     * @related get
     *
     * NOTE: This is tightly-coupled with pagination. So if the current page contains all
     * active orders, it will not fetch anything from the server but only sets `ordersToShow`
     * to the active orders that fits the current page.
     */
    async fetch() {
        // Show orders from the backend.
        const offset = this.nPerPage + (this.currentPage - 1 - 1) * this.nPerPage;
        const limit = this.nPerPage;
        this.ordersToShow = await this._fetch(limit, offset);

        this.trigger("update");
    }
    /**
     * This returns the orders from the backend that needs to be shown.
     * If the order is already in cache, the full information about that
     * order is not fetched anymore, instead, we use info from cache.
     *
     * @param {number} limit
     * @param {number} offset
     */
    async _fetch(limit, offset) {
        const prescription_orders = await this._getOrderIdsForCurrentPage(limit, offset);

        this.totalCount = prescription_orders.length;
        return prescription_orders;
    }
    async _getOrderIdsForCurrentPage(limit, offset) {
        const domain = [["currency_id", "=", this.pos.currency.id]].concat(
            this.searchDomain || []
        );
        this.pos.set_synch("connecting");
        const prescriptionOrders = await this.orm.searchRead(
            "prescription.order",
            domain,
            [
                "name",
                "patient_id",
                "amount_total",
                "prescription_date",
                "state",
                "physician_id",
                "pos_order_count",
                "acs_pos_processed",
            ],
            { offset, limit }
        );

        this.pos.set_synch("connected");
        return prescriptionOrders;
    }

    nextPage() {
        if (this.currentPage < this.lastPage) {
            this.currentPage += 1;
            this.fetch();
        }
    }
    prevPage() {
        if (this.currentPage > 1) {
            this.currentPage -= 1;
            this.fetch();
        }
    }

    /**
     * @param {integer|undefined} id id of the cached order
     * @returns {Array<models.Order>}
     */
    get(id) {
        return this.ordersToShow;
    }
    setSearchDomain(searchDomain) {
        this.searchDomain = searchDomain;
    }
    setNPerPage(val) {
        this.nPerPage = val;
    }
    setPage(page) {
        this.currentPage = page;
    }
}


export const prescriptionOrderFetcherService = {
    dependencies: PrescriptionOrderFetcher.serviceDependencies,
    start(env, deps) {
        return new PrescriptionOrderFetcher(deps);
    },
};

registry.category("services").add("prescription_order_fetcher", prescriptionOrderFetcherService);

```

  File: static/src/app/order_management_screen/prescription_order_list/prescription_order_list.js
  Content:
```
/** @odoo-module */
 
import { Component, useState } from "@odoo/owl";
import { PrescriptionOrderRow } from "@acs_hms_pharmacy_pos/app/order_management_screen/prescription_order_row/prescription_order_row";
import { useService } from "@web/core/utils/hooks";

/**
 * @props {models.Order} [initHighlightedOrder] initially highligted order
 * @props {Array<models.Order>} orders
 */

export class PrescriptionOrderList extends Component {
    static components = { PrescriptionOrderRow };
    static template = "acs_hms_pharmacy_pos.PrescriptionOrderList";

    setup() {
        this.ui = useState(useService("ui"));
        this.state = useState({ highlightedOrder: this.props.initHighlightedOrder || null });
    }
    get highlightedOrder() {
        return this.state.highlightedOrder;
    }
    _onClickOrder(order) {
        this.state.highlightedOrder = order;
    }
}
```

  File: static/src/app/order_management_screen/prescription_order_list/prescription_order_list.xml
  Content:
```
<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">

    <t t-name="acs_hms_pharmacy_pos.PrescriptionOrderList">
        <div class="orders overflow-y-auto">
            <div class="header-row d-flex text-bg-700 fw-bolder" t-att-class="{ 'd-none': ui.isSmall }">
                <div class="col name p-2">Order</div>
                <div class="col date p-2">Date</div>
                <div class="col customer p-2">Patient</div>
                <div class="col prescriptionsman p-2">Prescribing Doctor</div>
                <div class="col total p-2">Total</div>
                <div class="col state p-2">State</div>
                <div class="col posordercount p-2">POS Orders</div>
            </div>
            <div class="order-list">
                <t t-foreach="props.orders" t-as="order" t-key="order.id">
                    <PrescriptionOrderRow
                        onClickPrescriptionOrder.bind="props.onClickPrescriptionOrder"
                        order="order"
                        highlightedOrder="highlightedOrder"/>
                </t>
            </div>
        </div>
    </t>

</templates>

```

  File: static/src/app/order_management_screen/prescription_order_management_control_panel/prescription_order_management_control_panel.js
  Content:
```
/** @odoo-module */

import { useAutofocus, useService } from "@web/core/utils/hooks";
import { Component, useState } from "@odoo/owl";
import { usePos } from "@point_of_sale/app/store/pos_hook";

// NOTE: These are constants so that they are only instantiated once
// and they can be used efficiently by the OrderManagementControlPanel.
const VALID_SEARCH_TAGS = new Set(["date", "customer", "client", "name", "order"]);
const FIELD_MAP = {
    date: "date_order",
    customer: "partner_id.complete_name",
    client: "partner_id.complete_name",
    name: "name",
    order: "name",
};
const SEARCH_FIELDS = ["name", "partner_id.complete_name", "date_order"];

/**
 * @emits search
 */
export class PrescriptionOrderManagementControlPanel extends Component {
    static template = "acs_hms_pharmacy_pos.PrescriptionOrderManagementControlPanel";

    setup() {
        this.pos = usePos();
        this.ui = useState(useService("ui"));
        this.prescriptionOrderFetcher = useService("prescription_order_fetcher");
        useAutofocus();

        const currentPartner = this.pos.get_order().get_partner();
        if (currentPartner) {
            this.pos.orderManagement.searchString = currentPartner.name;
        }
        this.prescriptionOrderFetcher.setSearchDomain(this._computeDomain());
    }
    onInputKeydown(event) {
        if (event.key === "Enter") {
            this.props.onSearch(this._computeDomain());
        }
    }
    get showPageControls() {
        return this.prescriptionOrderFetcher.lastPage > 1;
    }
    get pageNumber() {
        const currentPage = this.prescriptionOrderFetcher.currentPage;
        const lastPage = this.prescriptionOrderFetcher.lastPage;
        return isNaN(lastPage) ? "" : `(${currentPage}/${lastPage})`;
    }
    get validSearchTags() {
        return VALID_SEARCH_TAGS;
    }
    get fieldMap() {
        return FIELD_MAP;
    }
    get searchFields() {
        return SEARCH_FIELDS;
    }
    /**
     * E.g. 1
     * ```
     *   searchString = 'Customer 1'
     *   result = [
     *      '|',
     *      '|',
     *      ['pos_reference', 'ilike', '%Customer 1%'],
     *      ['partner_id.complete_name', 'ilike', '%Customer 1%'],
     *      ['date_order', 'ilike', '%Customer 1%']
     *   ]
     * ```
     *
     * E.g. 2
     * ```
     *   searchString = 'date: 2020-05'
     *   result = [
     *      ['date_order', 'ilike', '%2020-05%']
     *   ]
     * ```
     *
     * E.g. 3
     * ```
     *   searchString = 'customer: Steward, date: 2020-05-01'
     *   result = [
     *      ['partner_id.complete_name', 'ilike', '%Steward%'],
     *      ['date_order', 'ilike', '%2020-05-01%']
     *   ]
     * ```
     */
    _computeDomain() {
        let domain = [
            ["state", "=", "prescription"],
            ["acs_pos_processed", "=", false],
        ];
        const input = this.pos.orderManagement.searchString.trim();
        if (!input) {
            return domain;
        }

        const searchConditions = this.pos.orderManagement.searchString.split(/[,&]\s*/);
        if (searchConditions.length === 1) {
            const cond = searchConditions[0].split(/:\s*/);
            if (cond.length === 1) {
                domain = domain.concat(Array(this.searchFields.length - 1).fill("|"));
                domain = domain.concat(
                    this.searchFields.map((field) => [field, "ilike", `%${cond[0]}%`])
                );
                return domain;
            }
        }

        for (const cond of searchConditions) {
            const [tag, value] = cond.split(/:\s*/);
            if (!this.validSearchTags.has(tag)) {
                continue;
            }
            domain.push([this.fieldMap[tag], "ilike", `%${value}%`]);
        }
        return domain;
    }
    
    clearSearch() {
        this.pos.orderManagement.searchString = "";
        this.onInputKeydown({ key: "Enter" });
    }

}

```

  File: static/src/app/order_management_screen/prescription_order_management_control_panel/prescription_order_management_control_panel.xml
  Content:
```
<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">
 
    <t t-name="acs_hms_pharmacy_pos.PrescriptionOrderManagementControlPanel" owl="1">
        <div class="control-panel d-flex justify-content-between align-items-center m-1 p-2 gap-2">
            <div class="d-flex">
                <button class="item button back btn btn-lg btn-secondary" t-on-click="() => pos.closeScreen()">
                    <span class="search-icon d-flex align-items-center">
                        <i class="fa fa-angle-double-left"/>
                        <span t-if="!ui.isSmall" class="ms-2"> Back</span>
                    </span>
                </button>
            </div>
            <div class="item search-box d-flex flex-grow-1 ms-3">
                <div class="input-group">
                    <span class="icon input-group-text">
                        <i class="oi oi-search" />
                    </span>
                    <input type="text" class="form-control form-control-lg" t-ref="autofocus" t-model="pos.orderManagement.searchString" t-on-keydown="onInputKeydown" placeholder="E.g. customer: Steward, date: 2020-05-09" />
                    <button type="button" class="clear  btn btn-secondary" t-on-click="() => this.clearSearch()">
                        <i class="oi oi-close" />
                    </button>
                </div> 
            </div>
            <div t-if="showPageControls" class="item item d-flex align-items-center ms-3 gap-2">
                <div class="page-controls input-group">
                    <button class="previous btn btn-lg btn-secondary" t-on-click="() => this.props.onPrevPage">
                        <i class="oi oi-chevron-left" role="img" aria-label="Previous Order List" title="Previous Order List"></i>
                    </button>
                    <button class="next btn btn-lg btn-secondary" t-on-click="() => this.props.onNextPage">
                        <i class="oi oi-chevron-right" role="img" aria-label="Next Order List" title="Next Order List"></i>
                    </button>
                </div>
                <div class="page">
                    <span><t t-esc="pageNumber" /></span>
                </div>
            </div>
            <div t-else="" class="item"></div>
        </div>
    </t>

</templates>

```

  File: static/src/app/order_management_screen/prescription_order_management_screen/prescription_order_management_screen.js
  Content:
```
/** @odoo-module **/

import { _t } from "@web/core/l10n/translation";
import { sprintf } from "@web/core/utils/strings";
import { parseFloat } from "@web/views/fields/parsers";
import { useBus, useService } from "@web/core/utils/hooks";
import { registry } from "@web/core/registry";
import { ControlButtonsMixin } from "@point_of_sale/app/utils/control_buttons_mixin";
import { Orderline } from "@point_of_sale/app/store/models";

import { SelectionPopup } from "@point_of_sale/app/utils/input_popups/selection_popup";
import { ErrorPopup } from "@point_of_sale/app/errors/popups/error_popup";
import { ConfirmPopup } from "@point_of_sale/app/utils/confirm_popup/confirm_popup";
import { NumberPopup } from "@point_of_sale/app/utils/input_popups/number_popup";

import { PrescriptionOrderList } from "@acs_hms_pharmacy_pos/app/order_management_screen/prescription_order_list/prescription_order_list";
import { PrescriptionOrderManagementControlPanel } from "@acs_hms_pharmacy_pos/app/order_management_screen/prescription_order_management_control_panel/prescription_order_management_control_panel";
import { Component, onMounted, useRef } from "@odoo/owl";
import { usePos } from "@point_of_sale/app/store/pos_hook";

/**
 * ID getter to take into account falsy many2one value.
 * @param {[id: number, display_name: string] | false} fieldVal many2one field value
 * @returns {number | false}
 */
function getId(fieldVal) {
    return fieldVal && fieldVal[0];
}

export class PrescriptionOrderManagementScreen extends ControlButtonsMixin(Component) {
    static storeOnOrder = false;
    static components = { PrescriptionOrderList, PrescriptionOrderManagementControlPanel };
    static template = "acs_hms_pharmacy_pos.PrescriptionOrderManagementScreen";

    setup() {
        super.setup();
        this.pos = usePos();
        this.popup = useService("popup");
        this.orm = useService("orm");
        this.root = useRef("root");
        this.numberBuffer = useService("number_buffer");
        this.prescriptionOrderFetcher = useService("prescription_order_fetcher");
        this.notification = useService("pos_notification");

        useBus(this.prescriptionOrderFetcher, "update", this.render);

        onMounted(this.onMounted);
    }

    onMounted() {
        // calculate how many can fit in the screen.
        // It is based on the height of the header element.
        // So the result is only accurate if each row is just single line.
        const flexContainer = this.root.el.querySelector(".flex-container");
        const cpEl = this.root.el.querySelector(".control-panel");
        const headerEl = this.root.el.querySelector(".header-row");
        const val = Math.trunc(
            (flexContainer.offsetHeight - cpEl.offsetHeight - headerEl.offsetHeight) /
                headerEl.offsetHeight
        );
        this.prescriptionOrderFetcher.setNPerPage(val);
        this.prescriptionOrderFetcher.fetch();
    }

    _getPrescriptionOrderOrigin(order) {
        for (const line of order.get_orderlines()) {
            if (line.prescription_order_origin_id) {
                return line.prescription_order_origin_id;
            }
        }
        return false;
    }
    get selectedPartner() {
        const order = this.pos.orderManagement.selectedOrder;
        return order ? order.get_partner() : null;
    }
    get orders() {
        return this.prescriptionOrderFetcher.get();
    }
    async _setNumpadMode(event) {
        const { mode } = event.detail;
        this.numpadMode = mode;
        this.numberBuffer.reset();
    }
    onNextPage() {
        this.prescriptionOrderFetcher.nextPage();
    }
    onPrevPage() {
        this.prescriptionOrderFetcher.prevPage();
    }
    onSearch(domain) {
        this.prescriptionOrderFetcher.setSearchDomain(domain);
        this.prescriptionOrderFetcher.setPage(1);
        this.prescriptionOrderFetcher.fetch();
    }

    async onClickPrescriptionOrder(clickedOrder) {
        const { confirmed, payload: selectedOption } = await this.popup.add(SelectionPopup, {
            title: _t("What do you want to do?"),
            list: [
                { id: "0", label: _t("Settle the order"), item: "settle" },
            ],
        });

        if (confirmed) {
            let currentPOSOrder = this.pos.get_order();
            const prescription_order = await this._getPrescriptionOrder(clickedOrder.id);
            //clickedOrder.shipping_date = this.pos.config.ship_later && prescription_order.shipping_date;

            const currentPrescriptionOrigin = this._getPrescriptionOrderOrigin(currentPOSOrder);
            const currentPrescriptionOriginId = currentPrescriptionOrigin && currentPrescriptionOrigin.id;

            if (currentPrescriptionOriginId) {
                const linkedSO = await this._getPrescriptionOrder(currentPrescriptionOriginId);
                if (
                    getId(linkedSO.partner_id) !== getId(prescription_order.partner_id)
                ) {
                    currentPOSOrder = this.pos.add_new_order();
                    this.notification.add(_t("A new order has been created."), 4000);
                }
            }

            try {
                await this.pos.load_new_partners();
            } catch {
                // FIXME Universal catch seems ill advised
            }
            const order_partner = this.pos.db.get_partner_by_id(prescription_order.partner_id[0]);
            if (order_partner) {
                currentPOSOrder.set_partner(order_partner);
            } else {
                try {
                    await this.pos._loadPartners([prescription_order.partner_id[0]]);
                } catch {
                    const title = _t("Customer loading error");
                    const body = _t(
                        "There was a problem in loading the %s customer.",
                        prescription_order.partner_id[1]
                    );
                    await this.popup.add(ErrorPopup, { title, body });
                }
                currentPOSOrder.set_partner(
                    this.pos.db.get_partner_by_id(prescription_order.partner_id[0])
                );
            }
            const orderFiscalPos = prescription_order.fiscal_position_id
                ? this.pos.fiscal_positions.find(
                      (position) => position.id === prescription_order.fiscal_position_id[0]
                  )
                : false;
            if (orderFiscalPos) {
                currentPOSOrder.fiscal_position = orderFiscalPos;
            }
            const orderPricelist = prescription_order.pricelist_id
                ? this.pos.pricelists.find(
                      (pricelist) => pricelist.id === prescription_order.pricelist_id[0]
                  )
                : false;
            if (orderPricelist) {
                currentPOSOrder.set_pricelist(orderPricelist);
            }

            if (selectedOption == "settle") {
                // settle the order
                const lines = prescription_order.prescription_line_ids;
                const product_to_add_in_pos = lines
                    .filter((line) => !this.pos.db.get_product_by_id(line.product_id[0]))
                    .map((line) => line.product_id[0]);
                if (product_to_add_in_pos.length) {
                    const { confirmed } = await this.popup.add(ConfirmPopup, {
                        title: _t("Products not available in POS"),
                        body: _t(
                            "Some of the products in your Prescription Order are not available in POS, do you want to import them?"
                        ),
                        confirmText: _t("Yes"),
                        cancelText: _t("No"),
                    });
                    if (confirmed) {
                        await this.pos._addProducts(product_to_add_in_pos);
                    }
                }

                /**
                 * This variable will have 3 values, `undefined | false | true`.
                 * Initially, it is `undefined`. When looping thru each prescription.order.line,
                 * when a line comes with lots (`.lot_names`), we use these lot names
                 * as the pack lot of the generated pos.order.line. We ask the user
                 * if he wants to use the lots that come with the prescription.order.lines to
                 * be used on the corresponding pos.order.line only once. So, once the
                 * `useLoadedLots` becomes true, it will be true for the succeeding lines,
                 * and vice versa.
                 */
                let useLoadedLots;

                for (var i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    if (!this.pos.db.get_product_by_id(line.product_id[0])) {
                        continue;
                    }

                    const new_line = new Orderline(
                        { env: this.env },
                        {
                            pos: this.pos,
                            order: this.pos.get_order(),
                            product: this.pos.db.get_product_by_id(line.product_id[0]),
                            description: line.name,
                            price: line.price_unit,
                            tax_ids: orderFiscalPos ? undefined : line.tax_id,
                            price_type: "manual",
                            prescription_order_origin_id: clickedOrder,
                            prescription_prescription_line_ids_id: line,
                            customer_note: line.customer_note,
                        }
                    );

                    if (
                        new_line.get_product().tracking !== "none" &&
                        (this.pos.picking_type.use_create_lots ||
                            this.pos.picking_type.use_existing_lots) &&
                        line.lot_names.length > 0
                    ) {
                        // Ask once when `useLoadedLots` is undefined, then reuse it's value on the succeeding lines.
                        const { confirmed } =
                            useLoadedLots === undefined
                                ? await this.popup.add(ConfirmPopup, {
                                      title: _t("SN/Lots Loading"),
                                      body: _t(
                                          "Do you want to load the SN/Lots linked to the Prescription Order?"
                                      ),
                                      confirmText: _t("Yes"),
                                      cancelText: _t("No"),
                                  })
                                : { confirmed: useLoadedLots };
                        useLoadedLots = confirmed;
                        if (useLoadedLots) {
                            new_line.setPackLotLines({
                                modifiedPackLotLines: [],
                                newPackLotLines: (line.lot_names || []).map((name) => ({
                                    lot_name: name,
                                })),
                            });
                        }
                    }
                    new_line.setQuantityFromSOL(line);
                    new_line.set_unit_price(line.price_unit);
                    new_line.set_discount(line.discount);
                    this.pos.get_order().add_orderline(new_line);
                }
            }

            this.pos.closeScreen();
        }
    }

    async _getPrescriptionOrder(id) {
        const [prescription_order] = await this.orm.read(
            "prescription.order",
            [id],
            [
                "prescription_line_ids",
                "patient_id",
                "partner_id",
                "pricelist_id",
                "fiscal_position_id",
                "amount_total",
                "amount_untaxed",
                "picking_ids",
            ]
        );

        const prescription_line_ids = await this._getSOLines(prescription_order.prescription_line_ids);
        prescription_order.prescription_line_ids = prescription_line_ids;

        // if (prescription_order.picking_ids[0]) {
        //     const [picking] = await this.orm.read(
        //         "stock.picking",
        //         [prescription_order.picking_ids[0]],
        //         ["scheduled_date"]
        //     );
        //     prescription_order.shipping_date = picking.scheduled_date;
        // }

        return prescription_order;
    }

    async _getSOLines(ids) {
        const so_lines = await this.orm.call("prescription.line", "read_converted", [ids]);
        return so_lines;
    }
}

registry.category("pos_screens").add("PrescriptionOrderManagementScreen", PrescriptionOrderManagementScreen);


```

  File: static/src/app/order_management_screen/prescription_order_management_screen/prescription_order_management_screen.xml
  Content:
```
<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">

    <t t-name="acs_hms_pharmacy_pos.PrescriptionOrderManagementScreen">
        <div class="order-management-screen screen h-100 bg-100 overflow-auto" t-att-class="{ 'd-none': !props.isShown }" t-ref="root">
                <div class="rightpane">
                    <div class="flex-container flex-container d-flex flex-column h-100">
                        <PrescriptionOrderManagementControlPanel
                            onSearch.bind="onSearch"
                            onPrevPage.bind="onPrevPage"
                            onNextPage.bind="onNextPage" />
                        <PrescriptionOrderList
                            onClickPrescriptionOrder.bind="onClickPrescriptionOrder"
                            orders="orders"
                            initHighlightedOrder="pos.orderManagement.selectedOrder" />
                    </div>
                </div>
        </div>
    </t>

</templates>

```

  File: static/src/app/order_management_screen/prescription_order_row/prescription_order_row.js
  Content:
```
/** @odoo-module **/

import { _t } from "@web/core/l10n/translation";
import { Component, useState } from "@odoo/owl";
import { useService } from "@web/core/utils/hooks";
import { deserializeDateTime } from "@web/core/l10n/dates";

/**
 * @props {models.Order} order
 * @props columns
 * @emits click-order
 */
export class PrescriptionOrderRow extends Component {
    static template = "acs_hms_pharmacy_pos.PrescriptionOrderRow";

    setup() {
        this.ui = useState(useService("ui"));
    }
    get order() {
        return this.props.order;
    }
    get highlighted() {
        const highlightedOrder = this.props.highlightedOrder;
        return !highlightedOrder
            ? false
            : highlightedOrder.backendId === this.props.order.backendId;
    }

    // Column getters //

    get name() {
        return this.order.name;
    }
    get date() {
        return deserializeDateTime(this.order.date_order).toFormat("yyyy-MM-dd HH:mm a");
    }
    get partner() {
        const partner = this.order.partner_id;
        return partner ? partner[1] : null;
    }
    get total() {
        return this.env.utils.formatCurrency(this.order.amount_total);
    }
    get state() {
        const state_mapping = {
            'draft': _t('Draft'),
            'prescription': _t('Prescribed'),
            'cancel': _t('Cancelled'),
        };
        return state_mapping[this.order.state];
    }
    get prescriptionsman() {
        const prescriptionsman = this.order.physician_id;
        return prescriptionsman ? prescriptionsman[1] : null;
    }
    get posordercount() {
        return this.order.pos_order_count;
    }
}
```

  File: static/src/app/order_management_screen/prescription_order_row/prescription_order_row.xml
  Content:
```
<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">

    <t t-name="acs_hms_pharmacy_pos.PrescriptionOrderRow">
        <div class="order-row"
        t-att-class="{ highlight: highlighted }"
        t-on-click="() => this.props.onClickPrescriptionOrder(props.order)">
            <div class="col name p-2">
                <div t-if="ui.isSmall">Order</div>
                <div><t t-esc="name"/></div>
            </div>
            <div class="col date p-2">
                <div t-if="ui.isSmall">Date</div>
                <div><t t-esc="date"/></div>
            </div>
            <div class="col partner p-2">
                <div t-if="ui.isSmall">Patient</div>
                <div><t t-esc="partner"/></div>
            </div>
            <div class="col prescriptionsman p-2">
                <div t-if="ui.isSmall">Prescribing Doctor</div>
                <div><t t-esc="prescriptionsman"/></div>
            </div>
            <div class="col total p-2">
                <div t-if="ui.isSmall">Total</div>
                <div><t t-esc="total"/></div>
            </div>
            <div class="col state p-2">
                <div t-if="ui.isSmall">State</div>
                <div><t t-esc="state"/></div>
            </div>
            <div class="col posordercount p-2">
                <div t-if="ui.isSmall">POS Orders</div>
                <div><t t-esc="pos_order_count"/></div>
            </div>
        </div>
    </t>

</templates>

```

  File: static/src/app/set_prescription_order_button/set_prescription_order_button.js
  Content:
```
/** @odoo-module */

import { ProductScreen } from "@point_of_sale/app/screens/product_screen/product_screen";
import { usePos } from "@point_of_sale/app/store/pos_hook";
import { Component } from "@odoo/owl";

export class SetPrescriptionOrderButton extends Component {
    static template = "acs_hms_pharmacy_pos.SetPrescriptionOrderButton";
    setup() {
        this.pos = usePos();
    }
    async click() {
        this.pos.showScreen("PrescriptionOrderManagementScreen");
    }
}

ProductScreen.addControlButton({ component: SetPrescriptionOrderButton });
```

  File: static/src/app/set_prescription_order_button/set_prescription_order_button.xml
  Content:
```
<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">

    <t t-name="acs_hms_pharmacy_pos.SetPrescriptionOrderButton">
        <div class="control-button o_prescription_order_button btn btn-light rounded-0 fw-bolder" t-on-click="() => this.click()">
            <i class="fa fa-link me-1" role="img" aria-label="Set Prescription Order"
               title="Set Prescription Order" /> Prescription Order
        </div>
    </t>

</templates>
```

  File: static/src/overrides/components/product_screen/product_screen.xml
  Content:
```
<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">

    <t t-name="acs_hms_pharmacy_pos.ProductScreen" t-inherit="point_of_sale.ProductScreen" t-inherit-mode="extension">
		<xpath expr="//Orderline" position="inside" >
            <t t-if="line.get_prescription_order()">
                <li class="info orderline-prescription-order ms-2">
                    <i class="fa fa-shopping-basket me-1" role="img" aria-label="SO" title="SO"/>
                    <t t-esc="line.get_prescription_order().name" />
                </li>
                <li class="info acs-kit-data">
                    <t t-set="pol_data" t-value="line.get_prescription_order()"/>
                    <t t-if="pol_data['is_kit_product']">
                        (Part of KIT: <span t-esc="pol_data['kit_product_name']"/> x <span class="mr8" t-esc="pol_data['kit_product_qty']"/>)
                    </t>
                </li>

                <!-- it is there in default odoo: check if needed -->
                <!-- <table t-if="line.get_prescription_order().details" class="prescription-order-info ms-2">
                    <tr t-foreach="line.get_prescription_order()?.details" t-as="soLine" t-key="soLine_index">
                        <td class="text-truncate"><t t-esc="soLine.product_uom_qty"/>x</td>
                        <td class="text-truncate" style="max-width: 275px;"
                            t-esc="soLine.product_name" />
                        <td class="text-truncate">: </td>
                        <td class="text-truncate"><t t-esc="env.utils.formatCurrency(soLine.total)" /> (tax incl.)</td>
                    </tr>
                </table> -->
            </t>
        </xpath>
    </t>

</templates>

```

  File: static/src/overrides/components/receipt_screen/order_receipt/order_receipt.xml
  Content:
```
<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">

    <t t-name="acs_hms_pharmacy_pos.OrderReceipt" t-inherit="point_of_sale.OrderLinesReceipt" t-inherit-mode="extension">
        <xpath expr="//t[@t-foreach]" position="inside">
            <div class="pos-receipt-left-padding" t-if="line.so_reference">From <t t-esc="line.so_reference"/></div>
            <div class="pos-receipt-left-padding" t-if="line.acs_kit_details">
                <table class="sale-order-info ms-2 text-truncate">
                    <tr t-foreach='line.acs_kit_details' t-as='line' t-key='line_index'>
                        <td class="text-truncate"><t t-esc="line['product_uom_qty']" />x</td>
                        <td class="text-truncate" style="max-width: 200px;">
                            <t t-esc="line['product_name']" />
                        </td>
                    </tr>
                </table>
            </div>
        </xpath>
    </t>

</templates>

```

  File: static/src/overrides/models/models.js
  Content:
```
/** @odoo-module */

import { Order, Orderline } from "@point_of_sale/app/store/models";
import { patch } from "@web/core/utils/patch";

patch(Orderline.prototype, {
    setup(_defaultObj, options) {
        super.setup(...arguments);
        // It is possible that this orderline is initialized using `init_from_JSON`,
        // meaning, it is loaded from localStorage or from export_for_ui. This means
        // that some fields has already been assigned. Therefore, we only set the options
        // when the original value is falsy.
        this.prescription_order_origin_id = this.prescription_order_origin_id || options.prescription_order_origin_id;
        this.prescription_order_line_id = this.prescription_order_line_id || options.prescription_order_line_id;
        this.acs_kit_details = this.acs_kit_details || options.acs_kit_details;
        this.customerNote = this.customerNote || options.customer_note;
    },
    init_from_JSON(json) {
        super.init_from_JSON(...arguments);
        this.prescription_order_origin_id = json.prescription_order_origin_id;
        this.prescription_order_line_id = json.prescription_order_line_id;
        this.acs_kit_details = json.acs_kit_details && JSON.parse(json.acs_kit_details);
    },
    export_as_JSON() {
        const json = super.export_as_JSON(...arguments);
        json.prescription_order_origin_id = this.prescription_order_origin_id;
        json.prescription_order_line_id = this.prescription_order_line_id;
        json.acs_kit_details = this.acs_kit_details && JSON.stringify(this.acs_kit_details);
        return json;
    },
    get_prescription_order(){
        if(this.prescription_order_origin_id) {
            const value = { 
                'name': this.prescription_order_origin_id.name,
                'details': this.acs_kit_details || false,
                'is_kit_product': this.prescription_order_line_id && this.prescription_order_line_id.is_kit_product || false,
                'kit_product_name': this.prescription_order_line_id && this.prescription_order_line_id.kit_product_name || false,
                'kit_product_qty': this.prescription_order_line_id && this.prescription_order_line_id.kit_product_qty || false
            }
            return value;
        }
        return false;
    },
    export_for_printing() {
        var json = super.export_for_printing(...arguments);
        json.acs_kit_details =  this.acs_kit_details;
        if (this.prescription_order_origin_id) {
            json.so_reference = this.prescription_order_origin_id.name;
        }
        return json;
    },
    /**
     * Set quantity based on the give prescription order line.
     * @param {'prescription.line'} prescriptionOrderLine
     */
    setQuantityFromSOL(prescriptionOrderLine) {
        if (this.product.type === 'service') {
            this.set_quantity(prescriptionOrderLine.qty_to_invoice);
        } else {
            this.set_quantity(
              prescriptionOrderLine.product_uom_qty -
                Math.max(prescriptionOrderLine.qty_delivered, prescriptionOrderLine.qty_invoiced)
            );
        }
    },
});

```

  File: static/src/overrides/models/pos_store.js
  Content:
```
/** @odoo-module */

import { PosStore } from "@point_of_sale/app/store/pos_store";
import { patch } from "@web/core/utils/patch";

patch(PosStore.prototype, {
    async setup(...args) {
        this.orderManagement = { searchString: "", selectedOrder: null };
        return await super.setup(...args);
    },
});

```

Doc:
  File: doc/changelog.rst
  Content:
```
`1.0.1                                                        [14/10/2023]`
***************************************************************************
- Migrate Module for v17
```

